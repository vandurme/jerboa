<?xml version="1.0"?>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<!-- Jerboa Ant File                                                      ~ -->
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<project name="Jerboa" default="build.all" basedir=".">
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- ~                                                                 ~ -->
  <!-- ~ PROPERTIES                                                      ~ -->
  <!-- ~                                                                 ~ -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  
  <!-- *********************************************** -->
  <!-- Project-specific Configuration                * -->
  <!-- *********************************************** -->
  
  <!-- Used with Javadoc generation and project.info target -->
  <property name="project.name" value="${ant.project.name}" />
  
  <!-- Used with Javadoc generation and project.info target -->
  <property name="project.description" value="Jerboa Java code" />
  
  <!-- Main package name for the project. Used as the distribution jar name, -->
  <!-- the release jar name, and expected main directory under "edu.jhu." -->
  <property name="project.package.name" value="jerboa" />
  
  <!-- Default executable class name for executing the run target -->
  <property name="project.exec.default" value="edu.jhu.jerboa.classification.InteractiveAnalytic" />

  <!-- Implementation title embedded in the manifest file when packaged -->
  <property name="project.manifest.title" value="${project.name}" />

  <!-- * Project Directories * -->
  <!-- Top level directory for the project  -->
  <property name="root.dir" value="${basedir}/.." />
  <!-- Project source code  -->
  <property name="src.dir" value="${basedir}/src" />
  <!-- Directory where classes are built  -->
  <property name="build.dir" value="${basedir}/classes" />
  <!-- Directory where dependant jars are kept and added to the classpath -->
  <property name="lib.dir" value="${basedir}/lib" />
  <!-- Directory where optional jars are kept and added to the classpath -->
  <property name="opt.dir" value="${basedir}/opt" />
  <!-- Directory where classes from the build.dir are jarred for distribution -->
  <property name="dist.dir" value="${basedir}/dist" />
  <!-- Directory where configuration files are expected -->
  <property name="config.dir" value="${basedir}/config" />
  <!-- analytics dir -->
  <property name="analytic.dir" value="${root.dir}/analytic" />

  <!-- pipeline stuff -->
  <condition property="aType" value="log-linear">
    <not>
      <isset property="aType"/>
    </not>
  </condition>
  
  <condition property="aRoot" value="${root.dir}">
    <not>
      <isset property="aRoot"/>
    </not>
  </condition>
  
  <condition property="aBuild" value="${analytic.dir}/your_analytic">
    <not>
      <isset property="aBuild"/>
    </not>
  </condition>
  
  <condition property="aSource" value="${analytic.dir}/your_analytic/src">
    <not>
      <isset property="aSource"/>
    </not>
  </condition>
  
  <property name="compile.debug" value="true" />
  <property name="compile.optimize" value="false" />
  <!-- Source files -->
  <patternset id="src.files">
    <include name="**/*.java" />
  </patternset>

  <!-- Class Files -->
  <patternset id="class.files">
    <include name="**/*.class" />
  </patternset>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- ~                                                                 ~ -->
  <!-- ~ INITIALIZATION                                                  ~ -->
  <!-- ~                                                                 ~ -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- *********************************************** -->
  <!-- * classpath:  Set up the classpath            * -->
  <!-- *********************************************** -->
  <target name="classpath">
    <!-- make sure output dir exists -->
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${lib.dir}" />
    <mkdir dir="${opt.dir}" />
    <path id="class.path">
      <!-- First, look to where we incrementally build things -->
      <pathelement path="${build.dir}" />
      
      <!-- Next, look to third party packages/jars -->
      <fileset dir="${lib.dir}">
	<include name="**/*.jar" />
      </fileset>
      <fileset dir="${opt.dir}">
	<include name="**/*.jar" />
      </fileset>
    </path>
  </target>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- ~                                                                 ~ -->
  <!-- ~ CLEANING                                                        ~ -->
  <!-- ~                                                                 ~ -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- *********************************************** -->
  <!-- * clean: deletes generated files: javadocs,   * -->
  <!-- *        classes and jar                      * -->
  <!-- *********************************************** -->
  <target name="clean" description="Delete all generated items (jar, class and javadoc files)" depends="clean.docs, clean.build">
  </target>

  <!-- *********************************************** -->
  <!-- * clean.build: deletes generated classes from * -->
  <!-- *              build and dist dirs            * -->
  <!-- *********************************************** -->
  <target name="clean.build">
    <delete dir="${build.dir}" failonerror="false" />
    <delete dir="${dist.dir}" failonerror="false" />
    <delete dir="${release.dir}" failonerror="false" />
  </target>

  <!-- *********************************************** -->
  <!-- * clean.docs:     deletes generated           * -->
  <!-- *                 javadocs                    * -->
  <!-- *********************************************** -->
  <target name="clean.docs">
    <delete includeEmptyDirs="true" failonerror="false">
      <fileset dir="${docs.user.dir}" />
      <fileset dir="${docs.developer.dir}" />
    </delete>
  </target>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- ~                                                                 ~ -->
  <!-- ~ COMPILING                                                       ~ -->
  <!-- ~                                                                 ~ -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- **************************************************** -->
  <!-- * compile: Incremental compilation all source code * -->
  <!-- *          into build dir                          * -->
  <!-- **************************************************** -->
  <target name="compile" depends="classpath" description="Incremental compilation of all source code into build directory.">
    <echo message="= Compile Project =========================================" />
    <echo message="=   compile.debug     = ${compile.debug}" />
    <echo message="=   compile.optimize  = ${compile.optimize}" />
    <!-- make sure output dir exists -->
    <mkdir dir="${build.dir}" />
    <javac destdir="${build.dir}" debug="${compile.debug}" optimize="${compile.optimize}" nowarn="off" listfiles="yes" classpathref="class.path">
      <!-- sources to explicitly compile -->
      <src location="${src.dir}" />
      <patternset refid="src.files" />
    </javac>
  </target>

  <!-- **************************************************** -->
  <!-- * build.all: Full clean, source generation, and      * -->
  <!-- *          compilation                             * -->
  <!-- **************************************************** -->
  <target name="build.all" depends="clean, classpath, compile" description="Full clean, source generation, and compilation.">
    
  </target>

  <!-- **************************************************** -->
  <!-- * timestamp-date: Get a timestamp (date only)      * -->
  <!-- **************************************************** -->
  <target name="timestamp-date">
    <tstamp>
      <format property="tStamp" pattern="MM.dd.yyyy" />
    </tstamp>
  </target>

  <!-- **************** -->
  <!-- * jar target   * -->
  <!-- *              * -->
  <!-- **************** -->
  <target name="jar" depends="compile, timestamp-date" description="Make all jar files (code and models)">
    
    <path id="dep.runtime">
      <fileset dir="${lib.dir}">
	<include name="**/*.jar" />
      </fileset>
    </path>
    <property name="dep.cp" value="${toString:dep.runtime}" />
    <manifestclasspath property="manifest.cp" jarfile="${dist.dir}/jerboa-${tStamp}.jar">
      <classpath refid="dep.runtime" />
    </manifestclasspath>
    
    <jar destfile="dist/jerboa-${tStamp}.jar">
      <fileset dir="${build.dir}"/>
      <fileset dir="${config.dir}"/>
      <manifest>
        <attribute name="Class-Path" value="${manifest.cp}" />
	<attribute name="Main-Class" value="edu.jhu.jerboa.classification.InteractiveAnalytic" />
        <attribute name="Implementation-Title" value="${project.manifest.title}" />
        <attribute name="Implementation-Vendor" value="The Johns Hopkins University HLTCOE" />
        <attribute name="Built-By" value="${user.name}" />
      </manifest>
    </jar>
  </target>
  
  <!-- **************** -->
  <!-- * pkg target   * -->
  <!-- *              * -->
  <!-- **************** -->
  <target name="package" description="Creates all jar files for distribution." depends="jar, jar.models">
  </target>
  
  <!-- ********************** -->
  <!-- * Model JAR target   * -->
  <!-- *                    * -->
  <!-- ********************** -->
  <target name="jar.models" description="Make a jar file of the models.">
    <fail unless="modelDir" message="Directory not set. Enter the absolute or relative path of a directory, e.g., -DmodelDir=/path/to/your/model"/>
    <fail unless="fileName" message="FileName not set. Enter the name of the file you'd like to output, e.g., -DfileName=myModel [you do not need to add .jar]"/>
    <mkdir dir="${opt.dir}" />
    <jar destfile="${opt.dir}/${fileName}.jar">
      <fileset dir="${modelDir}"/>
      <manifest>
        <attribute name="Implementation-Title" value="${project.manifest.title}" />
        <attribute name="Implementation-Vendor" value="The Johns Hopkins University HLTCOE" />
        <attribute name="Built-By" value="${user.name}" />
      </manifest>
    </jar>
  </target>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- ~                                                                 ~ -->
  <!-- ~ EXECUTION                                                       ~ -->
  <!-- ~                                                                 ~ -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- ****************************************************************** -->
  <!-- * run.class: run the class specified with the                    * -->
  <!-- *            command line arg of '-Dclass' or                    * -->
  <!-- *            if that isn't set, uses the                         * -->
  <!-- *            executable.class property                           * -->
  <!-- * e.g:                                                           * -->
  <!-- * ant run.class -Dclass=edu.jhu.MyNewClass -Dargs="arg1 arg2" * -->
  <!-- ****************************************************************** -->
  <target name="run.class" depends="compile" description="Run the class specified by -Dclass=[fully.qualified.classname]">
    <condition property="runClass" value="${class}">
      <isset property="class" />
    </condition>

    <!-- Properties are immutable, so if the class wasn't set above,  -->
    <!-- (from command line) use the executable class property value. -->
    <property name="runClass" value="${executable.class}" />

    <condition property="argString" value="${args}">
      <isset property="args" />
    </condition>
    <property name="argString" value="" />

    <echo message="= Run Class ${runClass} ==========================" />
    <java classname="${runClass}" fork="true" classpathref="class.path">
      <arg line="${argString}" />
      <jvmarg value="-Djava.endorsed.dirs=${endorsed.dir}" />
      <jvmarg value="-Xmx1G" />
      <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError" />
    </java>
  </target>
  
  <!-- ************************************** -->
  <!-- * get arguments from CL if not there * -->
  <!-- ************************************** -->
  <target name="input-runargs" unless="args" description="Prompts for command line arguments if necessary">
    <input addProperty="aType" message="TYPE: [log-linear|pa-binary|pa-regression|pa-multi]:"/>
    <input addProperty="aRoot" message="ROOT: e.g., /home/joe/Jerboa:"/>
    <input addProperty="aBuild" message="BUILD: e.g., /home/joe/Jerboa/analytic/your_analytic:"/>
    <input addProperty="aSource" message="SOURCE: e.g., /home/joe/Jerboa/analytic/your_analytic/src:"/>
  </target>
  
  <!-- ****************************************************************** -->
  <!-- * run.class: run the class specified with the                    * -->
  <!-- *            command line arg of '-Dclass' or                    * -->
  <!-- *            if that isn't set, uses the                         * -->
  <!-- *            executable.class property                           * -->
  <!-- * e.g:                                                           * -->
  <!-- * ant run.class -Dclass=edu.jhu.MyNewClass -Dargs="arg1 arg2"    * -->
  <!-- ****************************************************************** -->
  <target name="process" depends="compile" description="Run the processing 'task' via ant">

    <!-- Properties are immutable, so if the class wasn't set above,  -->
    <!-- (from command line) use the executable class property value. -->
    <property name="runClass" value="edu.jhu.jerboa.processing.ProcessStream" />

    <java classname="${runClass}" fork="true" classpathref="class.path">
      <arg line="${argString}" />
      <jvmarg value="${arg0}" />
      <jvmarg value="${arg1}" />
      <jvmarg value="${arg2}" />
    </java>
  </target>

  <target name="ngram" depends="compile" description="Creates n-grams from training set">
    <property name="runClass" value="edu.jhu.jerboa.processing.ProcessStream" />
    <java classname="${runClass}" fork="true" classpathref="class.path">
      <jvmarg value="-Xmx4G" />
      <jvmarg value="-DBUILD=${aBuild}" />
      <jvmarg value="-DJerboa.resourceType=jar" />
      <jvmarg value="-DJerboaProperties.filename=${aSource}/wordList.properties" />
    </java>
  </target>
  
  <target name="featurize.binary" depends="compile" description="Feature extraction and SVM-light formatting">
    <property name="runClass" value="edu.jhu.jerboa.processing.ProcessStream" />
    <java classname="${runClass}" fork="true" classpathref="class.path">
      <jvmarg value="-Xmx4G" />
      <jvmarg value="-DBUILD=${aBuild}" />
      <jvmarg value="-DJerboaProperties.filename=${aSource}/instanceMaker.binary.properties" />
    </java>
  </target>
  
  <target name="pa-binary.train" depends="compile" description="Train the passive-aggressive binary classifier">
    <property name="runClass" value="edu.jhu.jerboa.processing.ProcessStream" />
    <java classname="${runClass}" fork="true" classpathref="class.path">
      <jvmarg value="-Xmx4G" />
      <jvmarg value="-DPA.form=BINARY" />
      <jvmarg value="-DBUILD=${aBuild}" />
      <jvmarg value="-DJerboaProperties.filename=${aSource}/train.pa.properties" />
    </java>
  </target>
  
  <target name="pa-binary.test" depends="compile" description="Run the passive-aggressive binary classifier against test data">
    <property name="runClass" value="edu.jhu.jerboa.processing.ProcessStream" />
    <java classname="${runClass}" fork="true" classpathref="class.path">
      <jvmarg value="-Xmx4G" />
      <jvmarg value="-DBUILD=${aBuild}" />
      <jvmarg value="-DJerboaProperties.filename=${aSource}/test.pa-binary.properties" />
    </java>
  </target>
  
  <target name="pa-binary.run.all">
    <antcall target="ngram" />
    <antcall target="featurize.binary" />
    <antcall target="pa-binary.train" />
    <antcall target="pa-binary.test" />
  </target>

  <target name="run.interactiveAnalytic" depends="compile">
    <fail unless="JerboaProperties.filename" message="Jerboa Properties file not found. Enter the path to the properties file, e.g., -DJerboaProperties.filename=/path/to/your/analytics.properties"/>
    <java classname="${project.exec.default}" fork="false" classpathref="class.path">
      <arg value="${JerboaProperties.filename}" />
      <jvmarg value="-Xmx4G" />
      <jvmarg value="-DJerboaProperties.filename=${JerboaProperties.filename}" />
    </java>    
  </target>
</project>
